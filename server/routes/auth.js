const express = require('express');
const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const db = require('../config/database');
const router = express.Router();

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post('/register', async (req, res) => {
  try {
    const { username, password, email, sex = 'M' } = req.body;

    console.log('üìù Registration attempt:', { username, email, sex });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!username || !password || !email) {
      return res.status(400).json({
        success: false,
        message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (username.length < 4 || username.length > 23) {
      return res.status(400).json({
        success: false,
        message: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 4 –¥–æ 23 —Å–∏–º–≤–æ–ª–æ–≤'
      });
    }

    if (password.length < 6) {
      return res.status(400).json({
        success: false,
        message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [existingUsers] = await db.query(
      'SELECT account_id FROM login WHERE userid = ? OR email = ?',
      [username, email]
    );

    if (existingUsers.length > 0) {
      return res.status(400).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å bcrypt
    const hashedPassword = bcrypt.hashSync(password, 10);
    console.log('üîê Password hashed with bcrypt, length:', hashedPassword.length);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ - —É–±—Ä–∞–ª–∏ –ø–æ–ª–µ birthdate
    const [result] = await db.query(
      `INSERT INTO login (userid, user_pass, sex, email, group_id, state, 
       lastlogin, last_ip, character_slots) 
       VALUES (?, ?, ?, ?, 0, 0, NOW(), ?, 9)`,
      [username, hashedPassword, sex, email, req.ip]
    );

    console.log('‚úÖ User registered successfully, ID:', result.insertId);

    req.session.userId = result.insertId;
    req.session.username = username;
    req.session.groupId = 0;

    res.json({
      success: true,
      message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      user: {
        id: result.insertId,
        username: username,
        email: email
      }
    });

  } catch (error) {
    console.error('‚ùå Registration error:', error.message);
    console.error('üîç Error details:', error);
    
    let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
    
    if (error.code === 'ER_DATA_TOO_LONG') {
      errorMessage = '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–ª–∏–Ω—É –ø–æ–ª–µ–π.';
    } else if (error.errno === 1062) {
      errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
    } else if (error.code === 'ER_BAD_FIELD_ERROR') {
      errorMessage = '–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.';
    }
    
    res.status(500).json({
      success: false,
      message: errorMessage
    });
  }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    console.log('üîê Login attempt for user:', username);

    if (!username || !password) {
      return res.status(400).json({
        success: false,
        message: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [users] = await db.query(
      `SELECT account_id, userid, user_pass, email, sex, group_id, 
       logincount, lastlogin, last_ip, state, unban_time, vip_time 
       FROM login WHERE userid = ?`,
      [username]
    );

    if (users.length === 0) {
      console.log('‚ùå User not found:', username);
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    const user = users[0];
    console.log('üë§ User found:', user.userid);
    console.log('üîë Stored password length:', user.user_pass.length);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    if (user.state > 0) {
      return res.status(403).json({
        success: false,
        message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
      });
    }

    // –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    let validPassword = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–æ–ª—è
    if (user.user_pass.length === 32) {
      // MD5 hash (32 characters)
      const md5Hash = crypto.createHash('md5').update(password).digest('hex');
      validPassword = (md5Hash === user.user_pass);
      console.log('üîç MD5 password check:', validPassword ? 'VALID' : 'INVALID');
    } else if (user.user_pass.startsWith('$2a$') || user.user_pass.startsWith('$2b$') || user.user_pass.startsWith('$2y$')) {
      // bcrypt hash
      validPassword = bcrypt.compareSync(password, user.user_pass);
      console.log('üîç Bcrypt password check:', validPassword ? 'VALID' : 'INVALID');
    } else if (user.user_pass === password) {
      // Plain text
      validPassword = true;
      console.log('üîç Plain text password check: VALID');
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–±—É–µ–º –≤—Å–µ
      const md5Hash = crypto.createHash('md5').update(password).digest('hex');
      if (md5Hash === user.user_pass) {
        validPassword = true;
        console.log('üîç Auto-detected MD5: VALID');
      } else if (user.user_pass === password) {
        validPassword = true;
        console.log('üîç Auto-detected plain text: VALID');
      } else {
        console.log('üîç Password format unknown, all checks failed');
      }
    }

    if (!validPassword) {
      console.log('‚ùå Password validation failed');
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ö–æ–¥–µ
    await db.query(
      `UPDATE login SET 
       logincount = logincount + 1, 
       lastlogin = NOW(), 
       last_ip = ? 
       WHERE account_id = ?`,
      [req.ip, user.account_id]
    );

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
    req.session.userId = user.account_id;
    req.session.username = user.userid;
    req.session.groupId = user.group_id;

    console.log('‚úÖ Login successful for user:', user.userid);

    res.json({
      success: true,
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      user: {
        id: user.account_id,
        username: user.userid,
        email: user.email,
        groupId: user.group_id
      }
    });

  } catch (error) {
    console.error('‚ùå Login error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    });
  }
});

// –í—ã—Ö–æ–¥
router.post('/logout', (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      return res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ'
      });
    }
    
    res.json({
      success: true,
      message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
router.get('/check', (req, res) => {
  if (req.session.userId) {
    res.json({
      authenticated: true,
      user: {
        id: req.session.userId,
        username: req.session.username,
        groupId: req.session.groupId
      }
    });
  } else {
    res.json({
      authenticated: false
    });
  }
});

module.exports = router;